#!/usr/bin/env bash

set -u

# shellcheck source=/dev/null
{
  source "${TFMAKE_SCRIPT_DIR}/../include/tfmake/util.sh"
  source "${TFMAKE_SCRIPT_DIR}/../include/tfmake/store.sh"
}

util::context

function usage() {
  cat << EOF
Usage:
  tfmake run [options]

  This command run the generated Makefile for Terraform execution.

Options:
  -h, --help, help  Show this help output.
  --all             Execute Terraform for all modules.
  --dry-run         Print the modules that would be executed, but don't execute them.
EOF
  exit
}

mode="default"

case "${1-}" in
  -h|--help)
    usage
    ;;
  --all)
    mode="all"
    ;;
  --dry-run)
    mode="dry-run"
    ;;
  ?*)
    printf "Unknown option: %s\n\n" "${1}"
    usage
    ;;
esac

# validations
util::file_exist_condition \
  "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/Makefile" \
  "tfmake makefile"

# subcommand
truncate -s 0 "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/outputs/visited"

store::basepath "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/store"

util::log_info "[tfmake:run] executing 'terraform ${TFMAKE_CONTEXT}' for modules and their dependencies."

# make options
options=(-r -R)

if [[ "${TFMAKE_CONTEXT}" != "destroy" ]]; then
  options+=(-i)
fi

# "default" mode
if [[ "${mode}" == "default" ]]; then
  make "${options[@]}" -f "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/Makefile" 2> "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/logs/signpost.log"
fi

# "all" is useful for drift detection; 'tfmake touch' is not needed.
if [[ "${mode}" == "all" ]]; then
  make "${options[@]}" -B -f "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/Makefile" 2> "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/logs/signpost.log"
fi

# "dry-run" print the modules that would be executed, but don't execute them.
if [[ "${mode}" == "dry-run" ]]; then
  make "${options[@]}" -t -f "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/Makefile" | awk '/^touch/ {print $2}'

  # As 'make -t' touch files and fool future invocations; the next calls to 'touch'
  # aim to prevent that behavior.

  # Wait one second, so the next calls to 'touch' use a different time.
  sleep 1

  store::use modified

  files=$(util::splitlines "$(kv::keys)")
  for file in ${files}; do
    touch -c -m "${file}"
  done
fi

# look for errors and exit properly
exit_code=0

if [[ -f "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/outputs/visited" ]]; then
  nodes=$(cat "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/outputs/visited")

  store::use visited
  for node in ${nodes}; do
    value=true

    grep -qE "make: \[.*${node}\] Error .+" "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/logs/signpost.log"
    [[ $? -eq 0 ]] && value=false && exit_code=1

    kv::set "${node}" "${value}"
  done
fi

exit "${exit_code}"
