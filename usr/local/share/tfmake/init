#!/usr/bin/env bash

set -u

# shellcheck source=/dev/null
{
  source "${TFMAKE_SCRIPT_DIR}/../include/tfmake/util.sh"
  source "${TFMAKE_SCRIPT_DIR}/../include/tfmake/store.sh"
}

util::context

function usage() {
  cat << EOF
Usage:
  tfmake init [options]

  This command initialize the data directory for Terraform execution.

Options:
  -h, --help, help  Show this help output.
  --exclude         List of modules to exclude.
EOF
  exit
}

exclude=""

case "${1-}" in
  -h|--help|help)
    usage
    ;;
  -i|--exclude)
    exclude="${2-}"
    ;;
  ?*)
    printf "Unknown option: %s\n\n" "${1}"
    usage
    ;;
esac

function is_excluded() {
  local module="${1-}"
  local result=false

  if [[ -n "${exclude}" ]]; then
    store::use exclude
    if [[ -n $(kv::get "${module}") ]]; then
      result=true
    fi
  fi

  echo "${result}"
}

function get_deps() {
  local module="${1-}"
  local deps=""

  if [[ -f "${module}/.tfmake" ]]; then
    deps=$(yq -o=csv ".dependencies" "${module}/.tfmake")
  fi

  # sanitize deps, by removing the module itself and excluded modules
  local sep=""
  local items=${deps//,/ }
  deps=""

  for item in ${items}; do
    if [[ "${item}" == "${module}" || $(is_excluded "${item}") == "true" ]]; then
      continue
    fi

    deps+="${sep}${item}"
    sep=","
  done

  echo "${deps}"
}

mkdir -p "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}"/{logs,outputs,recipes}

# defaults
IAC_TOOL=$(util::global_config_get "iactool")
if [[ -z "${IAC_TOOL}" ]]; then
  (util::global_config_set "iactool" "terraform")
fi

PARALLEL=$(util::global_config_get "parallel")
if [[ -z "${PARALLEL}" ]]; then
  (util::global_config_set "parallel" "true")
fi

store::cleanup "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/store"
store::basepath "${TFMAKE_DATA_DIR}/${TFMAKE_CONTEXT}/store"

# set exclude modules
if [[ -n "${exclude}" ]]; then
  util::log_info "[tfmake:init] setting excluded modules."

  store::use exclude

  for module in ${exclude}; do
    kv::set "${module}" true
  done
fi

# Let two modules be A and B, with A being the newest and a dependency of B.
# Then, by following make semantics, B will be executed;
# even if all files inside B remains unchanged.

# Capturing the current time, to "touch" all modules with it,
# prevents that behaviour.
mtime=$(date +%Y%m%d%H%M.%S)

util::log_info "[tfmake:init] discovering Terraform modules and their dependencies."

while IFS= read -r file; do
  module=$(dirname "${file}")

  # continue if the module is excluded
  if [[ $(is_excluded "${module}") == "true" ]]; then
    continue
  fi

  # else include it if it doesn't exist
  store::use modules

  exist=$(kv::get "${module}")
  if [[ -z "${exist}" ]]; then
    kv::set "${module}" true
  fi

  touch -c -m -t "${mtime}" "${module}"

  # and its dependencies
  deps=$(get_deps "${module}")
  if [[ -n "${deps}" ]]; then
    store::use dependencies
    kv::set "${module}" "${deps}"
  fi
done <  <(find . -name ".terraform" -prune -o -name "*.tf" -type f -print | sed 's/\.\///g')
