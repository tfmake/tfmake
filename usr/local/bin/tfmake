#!/usr/bin/env bash

set -Eeuo pipefail

VERSION="0.1.0"

SCRIPT_DIR=$(cd "$(dirname "${BASH_SOURCE[0]}")" &>/dev/null && pwd -P)
export SCRIPT_DIR

# shellcheck source=/dev/null
{
  source "${SCRIPT_DIR}/../include/tfmake/utils.sh"
  source "${SCRIPT_DIR}/../include/tfmake/store.sh"
}

function usage() {
  cat << EOF
Usage:
  tfmake command [options] [args]

Available Commands:
  cleanup           Cleanup the data directory.
  config            Modify tfmake configuration.
  context           An alias for 'tfmake config' over the context value.
  init              Initialize the data directory for Terraform plan/apply execution.
  makefile          Generate a Makefile for Terraform plan/apply execution.
  mermaid           Generate a Mermaid flowchart diagram from Terraform modules and their dependencies.
  run               Run the Terraform plan/apply Makefile.
  summary           Create a Markdown summary.
  touch             Touch modified files.
  version           Show the current version.

GitHub Commands:
  gh-pr-comment     Add a comment to a GitHub pull request.
  gh-step-summary   Add content to GitHub Step Summary.

Other options:
  -h, --help, help  Print this help and exit.
  -v, --version     An alias for the "version" subcommand.
EOF
  exit
}

function context() {
  file::exist_condition \
    "${DATA_DIR}/global/store/config/keys" \
    "tfmake config --set context <plan|apply>"

  store::basepath "${DATA_DIR}/global/store"
  store::use config

  TFMAKE_CONTEXT=$(kv::get context)
  validate::context "${TFMAKE_CONTEXT}"

  export TFMAKE_CONTEXT
}

[[ $# -eq 0 ]] && usage

CMD="${1-}"
shift

case "${CMD}" in
-h|--help|help)
  usage
  ;;
-v|--version|version)
  echo "tfmake v${VERSION}"
  exit
  ;;
config|context)
  ;;
cleanup|gh-pr-comment|gh-step-summary|makefile|mermaid|init|run|summary|touch)
  context
  ;;
*)
  usage
  ;;
esac

SCRIPT_PATH="${SCRIPT_DIR}/../share/tfmake/${CMD}"
exec "bash" "${SCRIPT_PATH}" "$@"
